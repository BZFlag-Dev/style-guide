///
/// Generate CSS rules for spacing types (margin/padding) based on the
/// abbreviations and values used in the Bootstrap classes (e.g. `my-md-1`).
///
/// @access private
///
/// @param {String} $space_type 'margin' or 'padding'
/// @param {String} $direction  't', 'r', 'b', 'l', 'x', 'y'
/// @param {String} $value      '0', '1', '2', '3', '4', '5', 'auto'
/// @param {String} $breakpoint 'xs', 'sm', 'md', 'lg', 'xl'
///
@mixin _spacing($space_type, $direction, $value, $breakpoint) {
    @include respond-up($breakpoint) {
        $is-num: type-of($value) == 'number';
        $step: if($is-num, abs($value), $value);
        $result: map-get($spacing, $step);

        @if $space_type == 'margin' and $is-num and $value < 0 {
            $result: $result * -1;
        }

        @if $direction == null {
            #{$space_type}: $result;
        } @else {
            @each $direction in map-get($css-directions, $direction) {
                #{$space_type}-#{$direction}: $result;
            }
        }
    }
}

///
/// Add margin based on the Bootstrap class convention.
///
/// This mixin will **not** add an `!important` like the Bootstrap classes.
///
/// @access public
///
/// @param {String} $direction  't', 'r', 'b', 'l', 'x', 'y'
/// @param {String} $value      '0', '1', '2', '3', '4', '5', 'auto'
/// @param {String} $breakpoint 'xs', 'sm', 'md', 'lg', 'xl'
///
@mixin margin($direction: null, $value: 0, $breakpoint: xs) {
    @include _spacing('margin', $direction, $value, $breakpoint);
}

///
/// Add padding based on the Bootstrap class convention.
///
/// This mixin will **not** add an `!important` like the Bootstrap classes.
///
/// @access public
///
/// @param {String} $direction  't', 'r', 'b', 'l', 'x', 'y'
/// @param {String} $value      '0', '1', '2', '3', '4', '5', 'auto'
/// @param {String} $breakpoint 'xs', 'sm', 'md', 'lg', 'xl'
///
@mixin padding($direction: null, $value: 0, $breakpoint: xs) {
    @include _spacing('padding', $direction, $value, $breakpoint);
}
